// Code generated by goctl. DO NOT EDIT.
// Source: foodiLBS.proto

package server

import (
	"context"

	"github.com/foodi-org/foodi-lbs-server/github.com/foodi-org/foodi-lbs-server"
	"github.com/foodi-org/foodi-lbs-server/internal/logic/geo"
	"github.com/foodi-org/foodi-lbs-server/internal/svc"
)

type GeoServer struct {
	svcCtx *svc.ServiceContext
	foodi_lbs_server.UnimplementedGeoServer
}

func NewGeoServer(svcCtx *svc.ServiceContext) *GeoServer {
	return &GeoServer{
		svcCtx: svcCtx,
	}
}

func (s *GeoServer) GeoAdd(ctx context.Context, in *foodi_lbs_server.GeoAddRequest) (*foodi_lbs_server.GeoAddReply, error) {
	l := geologic.NewGeoAddLogic(ctx, s.svcCtx)
	return l.GeoAdd(in)
}

func (s *GeoServer) GeoPosition(ctx context.Context, in *foodi_lbs_server.PositionRequest) (*foodi_lbs_server.PositionReply, error) {
	l := geologic.NewGeoPositionLogic(ctx, s.svcCtx)
	return l.GeoPosition(in)
}

func (s *GeoServer) GeoHash(ctx context.Context, in *foodi_lbs_server.HashRequest) (*foodi_lbs_server.HashReply, error) {
	l := geologic.NewGeoHashLogic(ctx, s.svcCtx)
	return l.GeoHash(in)
}

func (s *GeoServer) GeoDist(ctx context.Context, in *foodi_lbs_server.DistRequest) (*foodi_lbs_server.DistReply, error) {
	l := geologic.NewGeoDistLogic(ctx, s.svcCtx)
	return l.GeoDist(in)
}

func (s *GeoServer) RadioOrder(ctx context.Context, in *foodi_lbs_server.RadioOrderRequest) (*foodi_lbs_server.RadioOrderReply, error) {
	l := geologic.NewRadioOrderLogic(ctx, s.svcCtx)
	return l.RadioOrder(in)
}

func (s *GeoServer) RadioOrderStore(ctx context.Context, in *foodi_lbs_server.RadioOrderStoreRequest) (*foodi_lbs_server.RadioOrderReply, error) {
	l := geologic.NewRadioOrderStoreLogic(ctx, s.svcCtx)
	return l.RadioOrderStore(in)
}

func (s *GeoServer) RadioMember(ctx context.Context, in *foodi_lbs_server.RadioMemberRequest) (*foodi_lbs_server.RadioOrderReply, error) {
	l := geologic.NewRadioMemberLogic(ctx, s.svcCtx)
	return l.RadioMember(in)
}

func (s *GeoServer) RadioMemberStore(ctx context.Context, in *foodi_lbs_server.RadioMemberStoreRequest) (*foodi_lbs_server.RadioOrderReply, error) {
	l := geologic.NewRadioMemberStoreLogic(ctx, s.svcCtx)
	return l.RadioMemberStore(in)
}
